--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class LevelColorRulesConfig
---@overload fun(data, path):LevelColorRulesConfig
local LevelColorRulesConfig = class:derive("LevelColorRulesConfig")



---Constructs an instance of LevelColorRulesConfig.
---@param data table Raw data from a file.
---@param path string Path to the file. The file is not loaded here, and it is not used in error messages, but some classes use it for saving data. TODO: Find an alternative.
function LevelColorRulesConfig:new(data, path)
    local u = _ConfigUtils
    self._path = path

    self.type = u.parseString(data.type, path, "type")
    if self.type == "random" then
        self.colors = {}
        for i = 1, #data.colors do
            self.colors[i] = u.parseInteger(data.colors[i], path, "colors[" .. tostring(i) .. "]")
        end
        self.colorStreak = u.parseNumber(data.colorStreak, path, "colorStreak")
        self.forceDifferentColor = u.parseBooleanOpt(data.forceDifferentColor, path, "forceDifferentColor")
    elseif self.type == "pattern" then
        self.pattern = {}
        for i = 1, #data.pattern do
            self.pattern[i] = u.parseInteger(data.pattern[i], path, "pattern[" .. tostring(i) .. "]")
        end
    else
        error(string.format("Unknown LevelColorRulesConfig type: %s (expected \"random\" or \"pattern\")", self.type))
    end
end



return LevelColorRulesConfig
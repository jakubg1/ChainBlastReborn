--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class FontConfig
---@overload fun(data, path):FontConfig
local FontConfig = class:derive("FontConfig")



---Constructs an instance of FontConfig.
---@param data table Raw data from a file.
---@param path string Path to the file. The file is not loaded here, and it is not used in error messages, but some classes use it for saving data. TODO: Find an alternative.
function FontConfig:new(data, path)
    local u = _ConfigUtils
    self._path = path

    self.type = u.parseString(data.type, path, "type")
    if self.type == "image" then
        self.image = u.parseImage(data.image, path, "image")

        self.characters = {}
        for n, _ in pairs(data.characters) do
            self.characters[tonumber(n)] = {}
            self.characters[tonumber(n)].offset = u.parseInteger(data.characters[n].offset, path, "characters." .. tostring(n) .. ".offset")
            self.characters[tonumber(n)].width = u.parseInteger(data.characters[n].width, path, "characters." .. tostring(n) .. ".width")
        end
        self.characters = {}
        self.characters.offset = u.parseInteger(data.characters.offset, path, "characters.offset")
        self.characters.width = u.parseInteger(data.characters.width, path, "characters.width")
    elseif self.type == "truetype" then
        self.path = u.parseFontFile(data.path, path, "path")
        self.size = u.parseInteger(data.size, path, "size")
        self.color = u.parseColor(data.color, path, "color")
    else
        error(string.format("Unknown FontConfig type: %s (expected \"image\" or \"truetype\")", self.type))
    end
end



return FontConfig
--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class ColorGeneratorConfig
---@overload fun(data, path):ColorGeneratorConfig
local ColorGeneratorConfig = class:derive("ColorGeneratorConfig")



---Constructs an instance of ColorGeneratorConfig.
---@param data table Raw data from a file.
---@param path string Path to the file. The file is not loaded here, and it is not used in error messages, but some classes use it for saving data. TODO: Find an alternative.
function ColorGeneratorConfig:new(data, path)
    local u = _ConfigUtils
    self._path = path

    self.type = u.parseString(data.type, path, "type")
    self.hasToExist = u.parseBooleanOpt(data.hasToExist, path, "hasToExist")
    self.selectChance = u.parseNumberOpt(data.selectChance, path, "selectChance")
    self.pathsInDangerOnly = u.parseBooleanOpt(data.pathsInDangerOnly, path, "pathsInDangerOnly")
    self.colors = {}
    for i = 1, #data.colors do
        self.colors[i] = u.parseInteger(data.colors[i], path, "colors[" .. tostring(i) .. "]")
    end
    self.colorsRemoveIfNonexistent = {}
    if data.colorsRemoveIfNonexistent then
        for i = 1, #data.colorsRemoveIfNonexistent do
            self.colorsRemoveIfNonexistent[i] = u.parseInteger(data.colorsRemoveIfNonexistent[i], path, "colorsRemoveIfNonexistent[" .. tostring(i) .. "]")
        end
    end
end



return ColorGeneratorConfig
--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class ParticleConfig
---@overload fun(data, path):ParticleConfig
local ParticleConfig = class:derive("ParticleConfig")



---Constructs an instance of ParticleConfig.
---@param data table Raw data from a file.
---@param path string Path to the file. The file is not loaded here, and it is not used in error messages, but some classes use it for saving data. TODO: Find an alternative.
function ParticleConfig:new(data, path)
    local u = _ConfigUtils
    self._path = path

    self.emitters = {}
    for i = 1, #data.emitters do
        self.emitters[i] = {}
        self.emitters[i].pos = u.parseVec2(data.emitters[i].pos, path, "emitters[" .. tostring(i) .. "].pos")
        self.emitters[i].speed = u.parseVec2(data.emitters[i].speed, path, "emitters[" .. tostring(i) .. "].speed")
        self.emitters[i].acceleration = u.parseVec2(data.emitters[i].acceleration, path, "emitters[" .. tostring(i) .. "].acceleration")
        self.emitters[i].lifespan = u.parseNumberOpt(data.emitters[i].lifespan, path, "emitters[" .. tostring(i) .. "].lifespan")
        self.emitters[i].spawnCount = u.parseInteger(data.emitters[i].spawnCount, path, "emitters[" .. tostring(i) .. "].spawnCount")
        self.emitters[i].spawnMax = u.parseInteger(data.emitters[i].spawnMax, path, "emitters[" .. tostring(i) .. "].spawnMax")
        self.emitters[i].spawnDelay = u.parseNumberOpt(data.emitters[i].spawnDelay, path, "emitters[" .. tostring(i) .. "].spawnDelay")

        self.emitters[i].particleData = {}
        self.emitters[i].particleData.speedMode = u.parseString(data.emitters[i].particleData.speedMode, path, "emitters[" .. tostring(i) .. "].particleData.speedMode")
        self.emitters[i].particleData.spawnScale = u.parseVec2(data.emitters[i].particleData.spawnScale, path, "emitters[" .. tostring(i) .. "].particleData.spawnScale")
        self.emitters[i].particleData.lifespan = u.parseNumberOpt(data.emitters[i].particleData.lifespan, path, "emitters[" .. tostring(i) .. "].particleData.lifespan")
        self.emitters[i].particleData.sprite = u.parseSprite(data.emitters[i].particleData.sprite, path, "emitters[" .. tostring(i) .. "].particleData.sprite")
        self.emitters[i].particleData.animationFrameCount = u.parseInteger(data.emitters[i].particleData.animationFrameCount, path, "emitters[" .. tostring(i) .. "].particleData.animationFrameCount")
        self.emitters[i].particleData.animationSpeed = u.parseNumber(data.emitters[i].particleData.animationSpeed, path, "emitters[" .. tostring(i) .. "].particleData.animationSpeed")
        self.emitters[i].particleData.animationLoop = u.parseBoolean(data.emitters[i].particleData.animationLoop, path, "emitters[" .. tostring(i) .. "].particleData.animationLoop")
        self.emitters[i].particleData.animationFrameRandom = u.parseBoolean(data.emitters[i].particleData.animationFrameRandom, path, "emitters[" .. tostring(i) .. "].particleData.animationFrameRandom")
        self.emitters[i].particleData.fadeInPoint = u.parseNumber(data.emitters[i].particleData.fadeInPoint, path, "emitters[" .. tostring(i) .. "].particleData.fadeInPoint")
        self.emitters[i].particleData.fadeOutPoint = u.parseNumber(data.emitters[i].particleData.fadeOutPoint, path, "emitters[" .. tostring(i) .. "].particleData.fadeOutPoint")
        self.emitters[i].particleData.posRelative = u.parseBoolean(data.emitters[i].particleData.posRelative, path, "emitters[" .. tostring(i) .. "].particleData.posRelative")
        self.emitters[i].particleData.colorPalette = u.parseColorPaletteOpt(data.emitters[i].particleData.colorPalette, path, "emitters[" .. tostring(i) .. "].particleData.colorPalette")
        self.emitters[i].particleData.colorPaletteSpeed = u.parseNumberOpt(data.emitters[i].particleData.colorPaletteSpeed, path, "emitters[" .. tostring(i) .. "].particleData.colorPaletteSpeed")
        self.emitters[i].particleData.directionDeviationTime = u.parseNumberOpt(data.emitters[i].particleData.directionDeviationTime, path, "emitters[" .. tostring(i) .. "].particleData.directionDeviationTime")
        self.emitters[i].particleData.directionDeviationSpeed = u.parseVec2Opt(data.emitters[i].particleData.directionDeviationSpeed, path, "emitters[" .. tostring(i) .. "].particleData.directionDeviationSpeed")
    end
end



return ParticleConfig
--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class SphereConfig
---@overload fun(data, path):SphereConfig
local SphereConfig = class:derive("SphereConfig")



---Constructs an instance of SphereConfig.
---@param data table Raw data from a file.
---@param path string Path to the file. The file is not loaded here, and it is not used in error messages, but some classes use it for saving data. TODO: Find an alternative.
function SphereConfig:new(data, path)
    local u = _ConfigUtils
    self._path = path

    self.sprite = u.parseSprite(data.sprite, path, "sprite")
    self.shadowSprite = u.parseSpriteOpt(data.shadowSprite, path, "shadowSprite")
    self.shadowOffset = u.parseVec2Opt(data.shadowOffset, path, "shadowOffset")
    self.spriteAnimationSpeed = u.parseNumberOpt(data.spriteAnimationSpeed, path, "spriteAnimationSpeed")
    self.spriteRollingSpeed = u.parseNumberOpt(data.spriteRollingSpeed, path, "spriteRollingSpeed")
    self.size = u.parseNumberOpt(data.size, path, "size")
    self.idleParticle = u.parseParticleOpt(data.idleParticle, path, "idleParticle")
    self.destroyParticle = u.parseParticle(data.destroyParticle, path, "destroyParticle")
    self.destroyCollectible = u.parseCollectibleGeneratorConfigOpt(data.destroyCollectible, path, "destroyCollectible")
    self.destroySound = u.parseSoundEventOpt(data.destroySound, path, "destroySound")
    self.colorSpeed = u.parseNumberOpt(data.colorSpeed, path, "colorSpeed")
    self.interchangeable = u.parseBoolean(data.interchangeable, path, "interchangeable")
    self.shootBehavior = u.parseSphereShootBehavior(data.shootBehavior, path, "shootBehavior")
    self.shootEffects = {}
    if data.shootEffects then
        for i = 1, #data.shootEffects do
            self.shootEffects[i] = u.parseCollectibleEffectConfig(data.shootEffects[i], path, "shootEffects[" .. tostring(i) .. "]")
        end
    end
    self.shootSpeed = u.parseNumberOpt(data.shootSpeed, path, "shootSpeed")
    self.shootSound = u.parseSoundEvent(data.shootSound, path, "shootSound")
    self.hitBehavior = u.parseSphereHitBehavior(data.hitBehavior, path, "hitBehavior")
    self.hitSound = u.parseSoundEvent(data.hitSound, path, "hitSound")
    self.type = u.parseStringOpt(data.type, path, "type")
    self.matches = {}
    for i = 1, #data.matches do
        self.matches[i] = u.parseInteger(data.matches[i], path, "matches[" .. tostring(i) .. "]")
    end
    self.doesNotCollideWith = {}
    if data.doesNotCollideWith then
        for i = 1, #data.doesNotCollideWith do
            self.doesNotCollideWith[i] = u.parseInteger(data.doesNotCollideWith[i], path, "doesNotCollideWith[" .. tostring(i) .. "]")
        end
    end
end



return SphereConfig
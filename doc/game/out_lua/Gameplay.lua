--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class GameplayConfig
---@overload fun(data, path):GameplayConfig
local GameplayConfig = class:derive("GameplayConfig")



---Constructs an instance of GameplayConfig.
---@param data table Raw data from a file.
---@param path string Path to the file. The file is not loaded here, and it is not used in error messages, but some classes use it for saving data. TODO: Find an alternative.
function GameplayConfig:new(data, path)
    local u = _ConfigUtils
    self._path = path

    self.levelSequence = {}
    for i = 1, #data.levelSequence do
        self.levelSequence[i] = u.parseLevelSequenceEntry(data.levelSequence[i], path, "levelSequence[" .. tostring(i) .. "]")
    end

    self.ui = {}
    self.ui.buttonClickSound = u.parseSoundEvent(data.ui.buttonClickSound, path, "ui.buttonClickSound")
    self.ui.buttonHoverSound = u.parseSoundEvent(data.ui.buttonHoverSound, path, "ui.buttonHoverSound")
    self.ui.levelAdvanceSound = u.parseSoundEvent(data.ui.levelAdvanceSound, path, "ui.levelAdvanceSound")

    self.sphereBehavior = {}
    self.sphereBehavior.acceleration = u.parseNumber(data.sphereBehavior.acceleration, path, "sphereBehavior.acceleration")
    self.sphereBehavior.foulAcceleration = u.parseNumberOpt(data.sphereBehavior.foulAcceleration, path, "sphereBehavior.foulAcceleration")
    self.sphereBehavior.attractionAcceleration = u.parseNumberOpt(data.sphereBehavior.attractionAcceleration, path, "sphereBehavior.attractionAcceleration")
    self.sphereBehavior.attractionForwardDecceleration = u.parseNumberOpt(data.sphereBehavior.attractionForwardDecceleration, path, "sphereBehavior.attractionForwardDecceleration")
    self.sphereBehavior.attractionForwardDeccelerationScarab = u.parseNumberOpt(data.sphereBehavior.attractionForwardDeccelerationScarab, path, "sphereBehavior.attractionForwardDeccelerationScarab")
    self.sphereBehavior.decceleration = u.parseNumber(data.sphereBehavior.decceleration, path, "sphereBehavior.decceleration")
    self.sphereBehavior.backwardsDecceleration = u.parseNumberOpt(data.sphereBehavior.backwardsDecceleration, path, "sphereBehavior.backwardsDecceleration")
    self.sphereBehavior.attractionSpeedBase = u.parseNumber(data.sphereBehavior.attractionSpeedBase, path, "sphereBehavior.attractionSpeedBase")
    self.sphereBehavior.attractionSpeedMult = u.parseNumber(data.sphereBehavior.attractionSpeedMult, path, "sphereBehavior.attractionSpeedMult")
    self.sphereBehavior.knockbackSpeedBase = u.parseNumber(data.sphereBehavior.knockbackSpeedBase, path, "sphereBehavior.knockbackSpeedBase")
    self.sphereBehavior.knockbackSpeedMult = u.parseNumber(data.sphereBehavior.knockbackSpeedMult, path, "sphereBehavior.knockbackSpeedMult")
    self.sphereBehavior.knockbackTime = u.parseNumberOpt(data.sphereBehavior.knockbackTime, path, "sphereBehavior.knockbackTime")
    self.sphereBehavior.knockbackStopAfterTime = u.parseBooleanOpt(data.sphereBehavior.knockbackStopAfterTime, path, "sphereBehavior.knockbackStopAfterTime")
    self.sphereBehavior.foulSpeed = u.parseNumber(data.sphereBehavior.foulSpeed, path, "sphereBehavior.foulSpeed")
    self.sphereBehavior.overspeedCheck = u.parseBoolean(data.sphereBehavior.overspeedCheck, path, "sphereBehavior.overspeedCheck")
    self.sphereBehavior.invincibleScarabs = u.parseBoolean(data.sphereBehavior.invincibleScarabs, path, "sphereBehavior.invincibleScarabs")
    self.sphereBehavior.luxorized = u.parseBooleanOpt(data.sphereBehavior.luxorized, path, "sphereBehavior.luxorized")
    self.sphereBehavior.joinSound = u.parseSoundEvent(data.sphereBehavior.joinSound, path, "sphereBehavior.joinSound")
    self.sphereBehavior.newGroupSound = u.parseSoundEvent(data.sphereBehavior.newGroupSound, path, "sphereBehavior.newGroupSound")
    self.sphereBehavior.noScarabs = u.parseBoolean(data.sphereBehavior.noScarabs, path, "sphereBehavior.noScarabs")
    self.sphereBehavior.permitLongMatches = u.parseBoolean(data.sphereBehavior.permitLongMatches, path, "sphereBehavior.permitLongMatches")

    if data.net then
        self.net = {}
        self.net.particle = u.parseParticle(data.net.particle, path, "net.particle")
        self.net.sound = u.parseSoundEvent(data.net.sound, path, "net.sound")
        self.net.posY = u.parseInteger(data.net.posY, path, "net.posY")
    end

    if data.lightningStorm then
        self.lightningStorm = {}
        self.lightningStorm.delay = u.parseExprNumber(data.lightningStorm.delay, path, "lightningStorm.delay")
        self.lightningStorm.particle = u.parseParticle(data.lightningStorm.particle, path, "lightningStorm.particle")
        self.lightningStorm.sound = u.parseSoundEvent(data.lightningStorm.sound, path, "lightningStorm.sound")
        self.lightningStorm.scoreEvent = u.parseScoreEventConfig(data.lightningStorm.scoreEvent, path, "lightningStorm.scoreEvent")
    end
end



return GameplayConfig
--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class LevelSequenceEntryConfig
---@overload fun(data, path):LevelSequenceEntryConfig
local LevelSequenceEntryConfig = class:derive("LevelSequenceEntryConfig")



---Constructs an instance of LevelSequenceEntryConfig.
---@param data table Raw data from a file.
---@param path string Path to the file. The file is not loaded here, and it is not used in error messages, but some classes use it for saving data. TODO: Find an alternative.
function LevelSequenceEntryConfig:new(data, path)
    local u = _ConfigUtils
    self._path = path

    self.type = u.parseString(data.type, path, "type")
    if self.type == "wait" then
        self.delay = u.parseNumber(data.delay, path, "delay")
    elseif self.type == "waitForCollectibles" then
        -- No fields
    elseif self.type == "pathEntity" then
        self.pathEntity = u.parsePathEntityConfig(data.pathEntity, path, "pathEntity")
        self.separatePaths = u.parseBoolean(data.separatePaths, path, "separatePaths")
        self.launchDelay = u.parseNumber(data.launchDelay, path, "launchDelay")
        self.waitUntilFinished = u.parseBoolean(data.waitUntilFinished, path, "waitUntilFinished")
        self.skippable = u.parseBoolean(data.skippable, path, "skippable")
    elseif self.type == "gameplay" then
        self.warmupTime = u.parseNumber(data.warmupTime, path, "warmupTime")
        self.previewFirstShooterColor = u.parseBooleanOpt(data.previewFirstShooterColor, path, "previewFirstShooterColor")
        self.onFail = u.parseIntegerOpt(data.onFail, path, "onFail")
        self.onWin = u.parseIntegerOpt(data.onWin, path, "onWin")
        self.onObjectivesReached = u.parseIntegerOpt(data.onObjectivesReached, path, "onObjectivesReached")
    elseif self.type == "fail" then
        self.waitUntilFinished = u.parseBoolean(data.waitUntilFinished, path, "waitUntilFinished")
        self.skippable = u.parseBoolean(data.skippable, path, "skippable")
    elseif self.type == "clearBoard" then
        -- No fields
    elseif self.type == "collectibleEffect" then
        self.effects = {}
        for i = 1, #data.effects do
            self.effects[i] = u.parseCollectibleEffectConfig(data.effects[i], path, "effects[" .. tostring(i) .. "]")
        end
    elseif self.type == "end" then
        self.status = u.parseString(data.status, path, "status")
    else
        error(string.format("Unknown LevelSequenceEntryConfig type: %s (expected \"wait\", \"waitForCollectibles\", \"pathEntity\", \"gameplay\", \"fail\", \"clearBoard\", \"collectibleEffect\" or \"end\")", self.type))
    end
end



return LevelSequenceEntryConfig